#!/usr/bin/env ruby

require 'optparse'
require 'colorize'
require 'pp'

require_relative '../commands/DockerRegistryCommand'

# our defaults / defines
options = {:user => nil, :password => nil, :registry_domain => nil, :debug => false}
ops = ['list','search', 'tags', 'delete_image', 'delete_tag']

# define our options and help
OptionParser.new do |opts|
  opts.banner = "Usage: registry.rb [options]"

  opts.on("-u", "--user USER", "optional, user to login") do |v|
    options[:user] = v
  end
  opts.on("-p", "--password PASSWORD", "optional, password to login") do |v|
    options[:password] = v
  end
  opts.on("-d", "--domain DOMAIN", "Set this to override the domain you defined in ~./docker_registry.yml") do |v|
    options[:registry_domain] = v
  end
  opts.on("-v", "--verbose", "verbose mode") do |v|
    options[:debug] = v
  end
  opts.on("-h", "--help", "Prints this help") do

    puts opts
    puts "\nArguments:"
    puts '<registry-domain> <operation> <value(optional)>'.colorize(:green)
    puts "\nif you have set domain in ~/.docker_registry.yml you can ease it up like this:"
    puts '<operation> <value(optional)>'.colorize(:green)

    puts "\nOperations:"
    puts 'list: list all available repositorys'
    puts 'search <key>: search for a repository'
    puts 'tags <repo-name>: list all tags of a repository'
    puts 'delete_image <repo-name> <tag>: delete a image with all its tags'
    puts 'delete_tag <repo-name> <tag>: delete a tag'
    exit
  end
end.parse!

# try to load values from tour configuration. Those get superseded by the arguments though
begin
  config = YAML::load(File.read(File.join(ENV['HOME'], '.docker_registry.yml')))
  if options[:debug]
    puts 'Found config:'.colorize(:blue)
    pp config
  end

  options[:registry_domain] = config['domain'] if config['domain'] && !options[:registry_domain]
  options[:user] = config['user'] if config['user'] && !options[:user]
  options[:password] = config['password'] if config['password'] && !options[:password]
rescue
  # just no config, move on
  puts 'No config found in ~/.docker_registry.yml . Create it and add domain:<> and optional user/password to avoid adding any arguments'.colorize(:light_white)
  if !ARGV[0]
    puts 'The first argument should be your registry domain without schema (HTTPS mandatory), optional with :port'.colorize(:red)
    exit 1
  else
    options[:registry_domain]  = ARGV.shift
  end
end

# ensure a operation is set. Be aware, we used shift up there - so we always stick with 0
if !ARGV[0]
  puts "Define the operation: #{ops.join(', ')}".colorize(:red)
  exit 1
else
  if !ops.include?(ARGV[0])
    puts "This operation is yet not implemented. Select on of:  #{ops.join(', ')}".colorize(:red)
    exit 1
  end

  op = ARGV.shift
end

# print out some informations debug mode
if options[:debug]
  pp options
  puts "Operation: #{op}".colorize(:blue)
end

# configure our request handler
registry = DockerRegistryCommand.new(options[:registry_domain], options[:user], options[:password], options[:debug])

# run the operations, which can actually have different amounts of mandatory arguments
case op
  when 'delete_image'
    if !ARGV[0]
      puts 'Please define a image name'
      exit 1
    else
      image_name = ARGV.shift
    end
    registry.delete_image(image_name)
  when 'delete_tag'
    if !ARGV[0]
      puts 'Please define a image name'
      exit 1
    else
      image_name = ARGV.shift
    end
    if !ARGV[0]
      puts 'Please define a tag'
      exit 1
    else
      tag = ARGV.shift
    end
    registry.delete_tag(image_name, tag)
  when 'list'
    registry.list
  when 'search'
    if !ARGV[0]
      puts 'Please define a search key'
      exit 1
    else
      key = ARGV.shift
      registry.search(key)
    end
  when 'tags'
    if !ARGV[0]
      puts 'Please define a repo name'
      exit 1
    else
      repo = ARGV.shift
      tags = registry.tags(repo)
      unless tags.nil?
        tags.each { |tag|
          puts tag
        }
      else
        puts 'Not tags found'
      end
    end
end
